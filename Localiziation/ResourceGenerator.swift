//
//  ResourceGenerator.swift
//  Localiziation
//
//  Created by Dan Leonard on 3/6/18.
//  Copyright Â© 2018 MacMeDan. All rights reserved.
//

import Foundation

func generateResourceEnum() {
    print("Reading from  <-    \(projectDirectory.appendingPathComponents(sourceFilePath.components(separatedBy: "/")).absoluteString)")
    print("Generating to ->    \(projectDirectory.appendingPathComponents(sourceFilePath.components(separatedBy: "/")).absoluteString)")

    let newValues = Array(NSDictionary(contentsOf: projectDirectory.appendingPathComponents(sourceFilePath.components(separatedBy: "/"))).flatMap{$0}!).sorted{($0.0 as! String) < ($1.0 as! String)}
    let staticFunctions = newValues.map {
        """
        
            /** \(($1 as! String)) */
            static var \($0) = {
                    NSLocalizedString("\($0)", comment: "\(($1 as! String).exscapeNewLine)")}()

        """
        }.joined()

    let contents = """
    //
    //  R.swift
    //  InspectionTool
    //
    //  Created by Dan Leonard on 3/1/18.
    //
    //  This file is autogenerated by \((#file as NSString).lastPathComponent)
    //
    // `R` represents Resource a common practace used in other development enviroments.

    import Foundation

    enum R {
        \(staticFunctions)
    }

    """

    writeData(contents, path: resourceFilePath.components(separatedBy: "/")) {
        print($0)
        print("Generated Resources ðŸš€ at path \(projectDirectory.appendingPathComponents(resourceFilePath.components(separatedBy: "/")).absoluteString)")
    }

}

func generateNewStringsFile() {
    var newData: String
    let componets = sourceFilePath.components(separatedBy: "/")
    let allValues = Array(Set(NSDictionary(contentsOf: projectDirectory.appendingPathComponents(componets))!.allValues as! [String]))
    newData = allValues.flatMap{ getEntry(value: $0) }.joined()

    writeData(newData, path: sourceFilePath.components(separatedBy: "/")) { _ in
        generateResourceEnum()
    }
    
}


func generateNewStringsSortedByKeyFile() {
    var newData: String
    let allValues = Array(NSDictionary(contentsOf: projectDirectory.appendingPathComponents(sourceFilePath.components(separatedBy: "/"))).flatMap{$0}!).sorted{($0.1 as! String) < ($1.1 as! String)}
    newData = allValues.flatMap{ getEntry(key: $0.0 as! String, value: $0.1 as! String) }.joined()

    writeData(newData, path: sourceFilePath.components(separatedBy: "/")) { _ in
        generateResourceEnum()
    }
}

