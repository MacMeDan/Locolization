//
//  ResourceGenerator.swift
//  Localiziation
//
//  Created by Dan Leonard on 3/6/18.
//  Copyright ¬© 2018 MacMeDan. All rights reserved.
//

import Foundation
func generateResourceEnum(with data: [String]?) {
    var newValues: [String]
    if let data = data {
        newValues = data.sorted()
    } else {
        newValues = Array(Set(NSDictionary(contentsOf: projectDirectory.appendingPathComponents(destinationFilePath.components(separatedBy: "/")))!.allValues as! [String]))
        newValues = newValues.sorted().flatMap{ $0.camelCased }
    }
    let enumCases = newValues.sorted().map { "    case \($0)" }.joined(separator: "\n")
    let tableName = destinationFilePath.components(separatedBy: "/").last ?? "Localizable"

    let contents = """
//
//  Resources.swift
//  InspectionTool
//
//  Created by Dan Leonard on 3/1/18.
//
//  This file is autogenerated by \((#file as NSString).lastPathComponent)
//
// `r` represents Resource a common practace used in other development enviroments.


protocol Localizable {
    var tableName: String { get }
    var localized: String { get }
}

extension String {
    func localized(bundle: Bundle = .main, tableName: String = "Localizable") -> String {
    // This is to call attention to strings that are not locolised for debugging.
    return NSLocalizedString(self, tableName: tableName, value: "‚ÄºÔ∏è \\(self) ‚ÄºÔ∏è", comment: "Add to Localizable.strings file")
    }
}

extension Localizable where Self: RawRepresentable, Self.RawValue == String {
    var localized: String {
    return rawValue.localized(tableName: tableName)
    }
}

public enum r: String, Localizable {
\(enumCases)

    var tableName: String {

    return "\(tableName)"
    }
}

"""

writeData(contents, path: destinationFilePath.components(separatedBy: "/")) {
    print($0)
    print("Generated Resources Enum üöÄ")
}

}
