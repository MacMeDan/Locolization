//
//  stringFinder.swift
//  Localiziation
//
//  Created by Dan Leonard on 3/15/18.
//  Copyright Â© 2018 MacMeDan. All rights reserved.
//
//
// The purpose of this class it to find strings in a file and add them to the Localizeable.strings file
//  input: File
//  Output:
//      The input file with strings replaced with R.camelCased where strings were
//      Autogenerated case in Resources.swift
//      Autogenerated entry in Loalisable.strings
//

import Foundation
var stringsToBeLocalised:[String] = []
var allValues = Array(Set(NSDictionary(contentsOf: projectDirectory.appendingPathComponents(sourceFilePath.components(separatedBy: "/")))!.allValues as! [String]))

func convertToResourceRef(_ input: String) -> String {
    stringsToBeLocalised.append(input)
    return "R.\(input.camelCased)"
}

let ignoreLinesContaining:[String] = ["assert", "fatalError"]

func checkIgnoredValues(value: String) -> Bool {
    var result: Bool = false
    ignoreLinesContaining.forEach {
        if value.contains($0) {
            result = true
        }
    }
    return result
}

func findUnlocalisedStringsAndConvertThem(fromFilePath: String) {
        do {
            let data = try String(contentsOf: projectDirectory.appendingPathComponents(fromFilePath.components(separatedBy: "/")), encoding: .utf8)
            let myStrings = data.components(separatedBy: .newlines)
            let converted: [String] = myStrings.map { line in
                if checkIgnoredValues(value: line) {
                    return line
                }
                    var components = line.components(separatedBy: "\"")
                    for item in 0...components.count-1 {
                        if item % 2 == 1 {
                            components[item] = convertToResourceRef(components[item])
                        }
                    }
                        return components.joined()
                }

            stringsToBeLocalised.forEach{
                // Check that this string dose not already have a LocolisableVersion
                if !allValues.contains($0) {
                    allValues.append($0)
                }
            }
            let newData = allValues.sorted().flatMap{ getEntry(key: $0.validChars, value: $0) }.joined()

            //Generate StringsFile and Resources
            writeData(newData, path: sourceFilePath.components(separatedBy: "/")) { _ in
                generateResourceEnum()
            }

            //Update OriginalFile
            writeData(converted.joined(separator: "\n"), path: fromFilePath.components(separatedBy: "/")) { _ in
                print("ConvertedFile at path: \(fromFilePath)")
            }
        } catch {
            assertionFailure("\(error.localizedDescription)")
        }
}


